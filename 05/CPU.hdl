// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not16(in=instruction, out=notINST);
    And16(a=instruction, b=notINST, out=zeroes);
    Mux16(a=zeroes, b=instruction, sel=instruction[15], out[12]=A, out[11]=C1, out[10]=C2, out[9]=C3, out[8]=C4, out[7]=C5, out[6]=C6, out[5]=D1, out[4]=D2, out[3]=writeM, out[2]=J1, out[1]=J2, out[0]=J3);
    Nand(a=instruction[15], b=D1, out=destination1);

    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=data);
    ARegister(in=data, load=destination1, out=Areg, out[0..14]=addressM, out=addressToPC);
    Mux16(a=Areg, b=inM, sel=A, out=Y);
    DRegister(in=ALUoutput, load=D2, out=X);
    ALU(x=X, y=Y, zx=C1, nx=C2, zy=C3, ny=C4, f=C5, no=C6, out=ALUoutput, out=outM, zr=ZR, ng=NG);

    Not(in=NG, out=notNG);
    Xor(a=NG, b=J1, out=cond1);
    Xor(a=ZR, b=J2, out=cond2);
    Xor(a=notNG, b=J3, out=cond3);
    Or(a=cond1, b=cond2, out=interm);
    Or(a=interm, b=cond3, out=INC);
    Not(in=INC, out=LOAD);

    PC(in=Areg, load=LOAD, inc=INC, reset=reset, out[0..14]=pc);
}
